***********backtracking problems********************

# generate subset using recursion

def generate(ind,current,ans,arr):
    if(ind==len(arr)):   # if ind is out of arr ,store the current subset and return(backtrack to the previous subset) 
        ans.append(current.copy())  # if we wont take copy of current then it reflects on ans too...so store the copy of current in ans
        return
    current.append(arr[ind])
    generate(ind+1,current,ans,arr)
    current.pop()
    generate(ind+1,current,ans,arr)
def subsets(arr):
    ind=0
    current=[]
    ans=[]
    generate(ind,current,ans,arr)
    return ans
arr=[1,2,3]
print(subsets(arr))


# if we take class (class Solution)at the top, we need to create an object for class
#obj=Solution()
#arr=[1,2,3]
#print(obj.subsets(arr))

o/p: [[1, 2, 3], [1, 2], [1, 3], [1], [2, 3], [2], [3], []]



*********************combination sum ***********************

class Solution:
    def generate(self,ind,current,ans,candidates,target):
        if (target==0):
            ans.append(current.copy())
            return
        if(target<0):
            return
        if(ind==len(candidates)):
            return 
        current.append(candidates[ind])
        self.generate(ind,current,ans,candidates,target-candidates[ind])
        current.pop()
        self.generate(ind+1,current,ans,candidates,target)
    def combinationSum(self, candidates, target):
        ind=0
        current=[]
        ans=[]
        self.generate(ind,current,ans,candidates,target)
        return ans

# take input as(in online compiler)
#obj=Solution()
#candidates=[2,3,6,7]
#target=7
#print(combinationSum(candidates,target)
#
