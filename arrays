****************product of subarray except itself  without using division operator*****************
#brute force method

arr=[1,2,3,4]
n=len(arr)
res=[]
for i in range(0,n):
    product=1
    for j in range(0,n):
        if(i!=j):
            product=product*arr[j]
    res.append(product)
print(res)    

o/p:[24, 12, 8, 6]


#time complexity(O(n^2))
---------------------------------------------------------------------------------------------------------------------------------------

#to reduce time complexity we need to optimize the code
#here we are using "/"


class Solution:
    def productExceptSelf(self, nums):
        n = len(nums) 
        no_of_zeros = 0 
        prod = 1 
        for i in nums:
            if(i==0):
                no_of_zeros+=1 
            else:
                prod*=i 
        ans = [] 
        for i in nums:
            if(no_of_zeros>1):
                ans.append(0)
            else:
                if(no_of_zeros==1):
                    if(i==0):
                        ans.append(prod)
                    else:
                        ans.append(0)
                else:
                    ans.append(prod//i)
        return ans 
#input
#obj=Solution()
#arr=[1,2,0,4]
#print(obj.productExceptSelf(arr))

o/p:[0, 0, 8, 0]

-------------------------------------------------------------------------------------------------------------------------

**************************Max subarray sum************************

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n=len(nums)
        ans=[]
        for i in range(0,n):
            for j in range(i,n):
                ans.append(nums[i:j+1])
        Max=float("-inf")
        for lst in ans:
            if(sum(lst)>Max):
                Max=sum(lst)
        return Max

# the time complexity is O(n^2)
# the memory limit is exceeded so we need to optimize the code ...for that we are using kadenes alg
# in kadenes alg,if we get max val in negative ..we need to convert the val into positive


********* Max subarray sum using kadenes alg*********

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        n=len(nums)
        cs=0
        ms=float("-inf")
        for i in nums:
            cs+=i
            ms=max(ms,cs)
            if(cs<0):
                cs=0
        return ms


#Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
#Output: 6
#Explanation: The subarray [4,-1,2,1] has the largest sum 6.
