# product of subarray except itself  without using division operator
#bsrute force method

arr=[1,2,3,4]
n=len(arr)
res=[]
for i in range(0,n):
    product=1
    for j in range(0,n):
        if(i!=j):
            product=product*arr[j]
    res.append(product)
print(res)    

o/p:[24, 12, 8, 6]


#time complexity(O(n^2))

to reduce time complexity we need to optimize the code
#using "/"


class Solution:
    def productExceptSelf(self, nums):
        n = len(nums) 
        no_of_zeros = 0 
        prod = 1 
        for i in nums:
            if(i==0):
                no_of_zeros+=1 
            else:
                prod*=i 
        ans = [] 
        for i in nums:
            if(no_of_zeros>1):
                ans.append(0)
            else:
                if(no_of_zeros==1):
                    if(i==0):
                        ans.append(prod)
                    else:
                        ans.append(0)
                else:
                    ans.append(prod//i)
        return ans 
obj=Solution()
arr=[1,2,0,4]
print(obj.productExceptSelf(arr))

o/p:[0, 0, 8, 0]
        
        
